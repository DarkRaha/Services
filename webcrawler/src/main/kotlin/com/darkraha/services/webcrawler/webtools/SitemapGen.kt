package com.darkraha.services.webcrawler.webtools

import com.darkraha.services.core.deferred.DeferredUserBuilder
import com.darkraha.services.core.job.Plugin
import com.darkraha.services.core.job.JobResponse
import com.darkraha.services.core.utils.Common
import com.darkraha.services.webcrawler.CrawlingResult
import com.darkraha.services.webcrawler.HandlingUri
import com.darkraha.services.webcrawler.appendCnt
import java.util.*
import java.util.concurrent.locks.ReentrantLock
import java.util.function.Consumer
import kotlin.concurrent.withLock

/**
 * Add-on to the web crawler for building sitemap.xml.
 *
 * @author Rahul Verma
 */
class SitemapGen : Plugin<CrawlingResult>() {

    private var comment = "Sitemap generated by the online tool socode4.com"
    private var isCustomDate = false
    private var isIgnoreDate = false
    private var changeFreq: ChangeFreq? = null
    private var isWithPriority = false
    private val sb = StringBuilder()
    private val lock = ReentrantLock()
    private var date: String = Common.w3cDateTimeFormat.format(Date())

    var countPages: Int = 0
        private set

    override val result: Any?
        get() = sb.toString()


    init {
        name = NAME
    }

    override fun onProgress(t: JobResponse<CrawlingResult>) {
        val pd = t.getProgressData()!!
        lock.withLock {
            addUrl(pd.currentData as HandlingUri)
        }
    }

    override fun onFinish(t: JobResponse<CrawlingResult>) {
        sb.append("</urlset>")
    }

    override fun onPending(t: JobResponse<CrawlingResult>) {
        val start = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                "\n" +
                "<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n"
        sb.append(start)
        comment.takeIf { it.isNotBlank() }?.apply {
            sb.append("<!-- ").append(this).append(" -->\n")
        }
    }



    private fun addUrl(handlingUri: HandlingUri) {
        sb.append("    <url>\n")
        sb.appendCnt(' ', 8).append("<loc>").append(handlingUri.url).append("</loc>\n")
        addLastMod(handlingUri)
        addChangefreq(handlingUri)
        addPriority(handlingUri)
        sb.append("    </url>\n")
        countPages++
    }

    private fun addLastMod(handlingUri: HandlingUri) {
        val doc = handlingUri.doc

        if (!isIgnoreDate) {
            val d = if (isCustomDate) {
                date
            } else {
                val og = doc.select("meta[property=\"og:article:modified_time\"]")
                if (og.size > 0) {
                    og[0].attr("content")
                } else ""
            }

            if (d.isNotEmpty()) {
                sb.appendCnt(' ', 8).append("<lastmod>").append(d).append("</lastmod>\n")
            }
        }
    }


    private fun addChangefreq(handlingUri: HandlingUri) {
        changeFreq?.apply {
            sb.appendCnt(' ', 8).append("<changefreq>").append(this).append("</changefreq>\n")
        }
    }

    private fun addPriority(handlingUri: HandlingUri) {
        if (isWithPriority) {
            val lvl = handlingUri.lvl
            sb.append(' ', 8).append("<priority>").append(
                when {
                    lvl == 0 && lvl == 1 -> 1.0f
                    lvl == 2 -> 0.9f
                    lvl == 3 -> 0.8f
                    else -> 0.5f
                }
            ).append("</priority>\n")
        }
    }


    class Builder {
        val sitemapGen = SitemapGen()
        fun comment(v: String) = this.apply { sitemapGen.comment = v.trim() }
        fun ignoreDate(v: Boolean) = this.apply { sitemapGen.isIgnoreDate = v }
        fun customDate(v: Boolean) =
            this.apply { sitemapGen.isCustomDate = v; sitemapGen.date = Common.w3cDateTimeFormat.format(Date()) }

        fun customDate(d: Date) =
            this.apply { sitemapGen.isCustomDate = true; sitemapGen.date = Common.w3cDateTimeFormat.format(d) }

        fun changeFreq(v: ChangeFreq) = this.apply { sitemapGen.changeFreq = v }
        fun withPriority(v: Boolean) = this.apply { sitemapGen.isWithPriority = v }

        fun build() = sitemapGen
    }

    enum class ChangeFreq {
        always,
        hourly,
        daily,
        weekly,
        monthly,
        yearly,
        never
    }

    companion object {
        @JvmStatic
        val NAME = "Sitemap generator by socode4.com"
    }
}